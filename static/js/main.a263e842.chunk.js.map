{"version":3,"sources":["components/Colorpanel/ColorPanel.js","firebase.js","components/Sidepanel/UserPanel.js","actions/changeChannel.js","actions/types.js","components/Sidepanel/Channels.js","components/Sidepanel/SidePanel.js","components/Messages/MessagesHeader.js","components/Messages/MessagesForm.js","components/Messages/Message.js","components/Messages/Messages.js","components/Metapanel/MetaPanel.js","components/App.js","components/Auth/Login.js","components/Auth/Register.js","serviceWorker.js","reducers/userReducer.js","reducers/channelReducer.js","reducers/index.js","actions/setuser.js","actions/clearuser.js","components/spinner.js","index.js"],"names":["ColorPanel","Sidebar","as","Menu","icon","inverted","vertical","visible","width","Divider","Button","size","color","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","UserPanel","dropDownOptions","key","text","props","currentUser","displayName","disabled","onClick","handleSignout","auth","signOut","then","console","log","Grid","style","background","Column","Row","padding","margin","Header","floated","Icon","name","Content","Dropdown","trigger","Image","src","this","photoURL","space","avatar","options","channelChange","channel","type","payload","currentChannel","Channels","state","channels","modal","firstLoad","channelName","channelDetail","channelsRef","database","ref","activeChannelID","removeListener","off","closeModal","setState","openModal","handleChange","event","target","value","isFormValid","handleSubmit","addChannel","push","newChannel","id","deatils","createdBy","child","update","catch","err","setFirstChannel","length","firstChannel","setActiveChannel","activeChannel","addListener","loadedChannels","on","snap","val","displayChannels","map","Item","opacity","Fragment","paddingBottom","Modal","basic","open","onClose","Form","onSubmit","Field","Input","fluid","label","onChange","ModalActions","connect","SidePanel","fixed","fontSize","MessagesHeader","Segment","clearing","marginBottom","Subheader","placeholder","MessagesForm","message","loading","errors","createMessage","timestamp","ServerValue","TIMESTAMP","user","uid","content","sendMessage","messagesRef","set","error","concat","className","labelPosition","some","toLowerCase","includes","Group","widths","isOwnMessage","Message","Comment","Avatar","Author","Metadata","moment","fromNow","Text","Messages","messages","messageLoading","channelID","addMessageListner","loadedMessages","displayMessages","MetaPanel","columns","marginLeft","Login","email","password","preventDefault","signInWithEmailAndPassword","createdUser","handleErrors","inputName","displayErrors","i","textAlign","verticalAlign","maxWidth","stacked","iconPosition","backgroundColor","to","Register","username","passwordconfirmation","userRef","isFormEmpty","isPasswordValid","saveUser","Promise","resolve","createUserWithEmailAndPassword","updateProfile","md5","Boolean","window","location","hostname","match","intitialUserState","isLoading","user_reducer","action","intitialChannelState","channel_reducer","rootReducer","combineReducers","setUser","clearUser","Spinner","Dimmer","Loader","store","createStore","composeWithDevTools","Root","onAuthStateChanged","history","exact","path","component","App","RootWithAuth","withRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a263e842.chunk.js","sourcesContent":["import React from \"react\";\nimport { Sidebar, Button, Menu, Divider } from \"semantic-ui-react\";\n\nclass ColorPanel extends React.Component {\n  render() {\n    return (\n      <Sidebar\n        as={Menu}\n        icon=\"labeled\"\n        inverted\n        vertical\n        visible\n        width=\"very thin\"\n      >\n        <Divider />\n        <Button icon=\"add\" size=\"small\" color=\"blue\" />\n      </Sidebar>\n    );\n  }\n}\nexport default ColorPanel;\n","import firebase from 'firebase/app';\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport \"firebase/storage\"\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDm0ivj5TqTQ8j87LgNxf0gYdNJbcO9Dy4\",\n    authDomain: \"slack-clone-188bc.firebaseapp.com\",\n    databaseURL: \"https://slack-clone-188bc.firebaseio.com\",\n    projectId: \"slack-clone-188bc\",\n    storageBucket: \"slack-clone-188bc.appspot.com\",\n    messagingSenderId: \"808662212536\",\n    appId: \"1:808662212536:web:79a4c351a882f7b219b94d\",\n    measurementId: \"G-592NGDLKS4\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport default firebase;","import React from \"react\";\nimport { Grid, Header, Icon, Dropdown, Image } from \"semantic-ui-react\";\n\nimport firebase from \"../../firebase\";\n\nclass UserPanel extends React.Component {\n  dropDownOptions = () => [\n    {\n      key: \"user\",\n      text: (\n        <span>\n          Signed in as <strong>{this.props.currentUser.displayName}</strong>\n        </span>\n      ),\n      disabled: true,\n    },\n    {\n      key: \"avatar\",\n      text: <span>Change Avatar</span>,\n    },\n    {\n      key: \"signout\",\n      text: <span onClick={this.handleSignout}>SignOut</span>,\n    },\n  ];\n\n  handleSignout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"signed_out\"));\n  };\n\n  render() {\n    return (\n      <Grid style={{ background: \"#4c3c4c\" }}>\n        <Grid.Column>\n          <Grid.Row style={{ padding: \"1.2em\", margin: 0 }}>\n            {/* This is main App Header */}\n            <Header inverted floated=\"left\" as=\"h2\">\n              <Icon name=\"code\" />\n              <Header.Content>Nerd-Chat</Header.Content>\n            </Header>\n            <Header style={{ padding: \"0.25em\" }} as=\"h4\">\n              <Dropdown\n                trigger={\n                  <span>\n                    <Image\n                      src={this.props.currentUser.photoURL}\n                      space=\"right\"\n                      avatar\n                    />\n                    {this.props.currentUser.displayName}\n                  </span>\n                }\n                options={this.dropDownOptions()}\n              />\n            </Header>\n          </Grid.Row>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default UserPanel;\n","import * as actionTypes from \"./types\";\n\nconst channelChange = (channel) => {\n  return {\n    type: actionTypes.CHANGE_CHANNEL,\n    payload: {\n      currentChannel: channel,\n    },\n  };\n};\n\nexport default channelChange;\n","// User Related Actions\n\nexport const SET_USER = \"SET_USER\";\nexport const CLEAR_USER = \"CLEAR_USER\";\n\n// Channel Related Actions\nexport const CHANGE_CHANNEL = \"CHANGE_CHANNEL\";\n","import React from \"react\";\nimport {\n  Menu,\n  Icon,\n  Modal,\n  Form,\n  Input,\n  ModalActions,\n  Button,\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nimport channelChange from \"../../actions/changeChannel\";\nimport firebase from \"../../firebase\";\n\nclass Channels extends React.Component {\n  state = {\n    channels: [],\n    modal: false,\n    firstLoad: true,\n    channelName: \"\", // Used for taking input while making channel\n    channelDetail: \"\", // Used for taking input while making channel\n    channelsRef: firebase.database().ref(\"channels\"),\n    currentUser: this.props.currentUser,\n    activeChannelID: \"\",\n  };\n  componentDidMount() {\n    this.addListener();\n  }\n  componentWillUnmount() {\n    this.removeListener();\n  }\n  removeListener = () => {\n    this.state.channelsRef.off();\n  };\n  closeModal = () => this.setState({ modal: false });\n\n  openModal = () => this.setState({ modal: true });\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  isFormValid = ({ channelName, channelDetail }) =>\n    channelName && channelDetail;\n\n  handleSubmit = () => {\n    if (this.isFormValid(this.state)) {\n      this.addChannel();\n    }\n  };\n\n  addChannel = () => {\n    const { channelsRef, channelName, channelDetail, currentUser } = this.state;\n    const key = channelsRef.push().key;\n    const newChannel = {\n      id: key,\n      name: channelName,\n      deatils: channelDetail,\n      createdBy: {\n        name: currentUser.displayName,\n        avatar: currentUser.photoURL,\n      },\n    };\n    channelsRef\n      .child(key)\n      .update(newChannel)\n      .then(() => {\n        this.setState({ channelName: \"\", channelDetail: \"\" });\n        this.closeModal();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  setFirstChannel = () => {\n    if (this.state.firstLoad && this.state.channels.length > 0) {\n      const firstChannel = this.state.channels[0];\n      this.setActiveChannel(firstChannel);\n      this.props.channelChange(firstChannel);\n      this.setState({ firstLoad: false });\n    }\n  };\n\n  setActiveChannel = (channel) => {\n    this.setState({ activeChannel: channel.id });\n  };\n\n  addListener = () => {\n    let loadedChannels = [];\n    this.state.channelsRef.on(\"child_added\", (snap) => {\n      loadedChannels.push(snap.val());\n      this.setState({ channels: loadedChannels }, () => this.setFirstChannel());\n    });\n  };\n  channelChange = (channel) => {\n    this.setActiveChannel(channel);\n    this.props.channelChange(channel);\n  };\n\n  displayChannels = (channels) => {\n    if (channels.length) {\n      return channels.map((channel) => (\n        <Menu.Item\n          key={channel.id}\n          onClick={() => this.channelChange(channel)}\n          name={channel.name}\n          style={{ opacity: 0.7 }}\n        >\n          # {channel.name}\n        </Menu.Item>\n      ));\n    }\n  };\n\n  render() {\n    const { channels, modal } = this.state;\n    return (\n      <React.Fragment>\n        <Menu.Menu style={{ paddingBottom: \"2em\" }}>\n          <Menu.Item>\n            <span>\n              <Icon name=\"exchange\" />\n              Nerd Groups{\" \"}\n            </span>\n            ({channels.length})<Icon name=\"add\" onClick={this.openModal} />\n            {this.displayChannels(this.state.channels)}\n          </Menu.Item>\n        </Menu.Menu>\n        <Modal basic open={modal} onClose={this.closeModal}>\n          <Modal.Header>Create a Nerd Group</Modal.Header>\n          <Modal.Content>\n            <Form onSubmit={this.handleSubmit}>\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"Name of group\"\n                  name=\"channelName\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"Deatils of group\"\n                  name=\"channelDetail\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n            </Form>\n          </Modal.Content>\n          <ModalActions>\n            <Button color=\"green\" inverted onClick={this.handleSubmit}>\n              <Icon name=\"checkmark\" /> Add\n            </Button>\n            <Button color=\"red\" inverted onClick={this.closeModal}>\n              <Icon name=\"remove\" /> Cancel\n            </Button>\n          </ModalActions>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(null, { channelChange })(Channels);\n","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nimport UserPanel from \"./UserPanel\";\nimport Channels from \"./Channels\";\n\nclass SidePanel extends React.Component {\n  render() {\n    return (\n      <Menu\n        size=\"large\"\n        inverted\n        fixed=\"left\"\n        vertical\n        style={{ background: \"#4c3c4c\", fontSize: \"1.2rem\" }}\n      >\n        <UserPanel currentUser={this.props.currentUser} />\n        <Channels currentUser={this.props.currentUser} />\n      </Menu>\n    );\n  }\n}\n\nexport default SidePanel;\n","import React from \"react\";\nimport { Header, Input, Icon, Segment } from \"semantic-ui-react\";\nclass MessagesHeader extends React.Component {\n  render() {\n    return (\n      <Segment clearing>\n        {\" \"}\n        <Header as=\"h2\" floated={true} style={{ marginBottom: 0 }}>\n          <span>\n            {this.props.currentChannel && this.props.currentChannel.name}\n            <Icon name={\"star outline\"} color=\"black\" />\n          </span>\n          <Header.Subheader>2 Users</Header.Subheader>\n        </Header>\n        <Header floated=\"right\">\n          <Input\n            size=\"mini\"\n            icon=\"search\"\n            name=\"searchTerm\"\n            placeholder=\"Search Messages\"\n          />\n        </Header>\n      </Segment>\n    );\n  }\n}\nexport default MessagesHeader;\n","import React from \"react\";\nimport { Segment, Button, Input } from \"semantic-ui-react\";\n\nimport firebase from \"../../firebase\";\n\nclass MessagesForm extends React.Component {\n  state = {\n    message: \"\",\n    currentChannel: this.props.currentChannel,\n    currentUser: this.props.currentUser,\n    loading: false,\n    errors: [],\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  createMessage = () => {\n    const message = {\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      user: {\n        id: this.state.currentUser.uid,\n        name: this.state.currentUser.displayName,\n        avatar: this.state.currentUser.photoURL,\n      },\n      content: this.state.message,\n    };\n    return message;\n  };\n\n  sendMessage = () => {\n    const { messagesRef, currentChannel } = this.props;\n    const { message } = this.state;\n    if (message) {\n      messagesRef\n        .child(currentChannel.id)\n        .push()\n        .set(this.createMessage())\n        .then(() => {\n          this.setState({ loading: false, message: \"\", errors: [] });\n        })\n        .catch((err) => {\n          console.error(err);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(err),\n          });\n        });\n    } else {\n      this.setState({\n        errors: this.state.errors.concat({ message: \"Add the Message\" }),\n      });\n    }\n  };\n\n  render() {\n    const { errors, loading, message } = this.state;\n    return (\n      <Segment className=\"message__form\">\n        <Input\n          fluid\n          name=\"message\"\n          onChange={this.handleChange}\n          value={message}\n          style={{ marginBottom: \"0.7em\" }}\n          label={<Button icon={\"add\"} />}\n          labelPosition=\"left\"\n          placeholder=\"Write your message\"\n          className={\n            errors.some((error) =>\n              error.message.toLowerCase().includes(\"message\")\n            )\n              ? \"error\"\n              : \"\"\n          }\n        />\n        <Button.Group icon widths=\"2\">\n          <Button\n            color=\"orange\"\n            content=\"Add Reply\"\n            onClick={this.sendMessage}\n            labelPosition=\"left\"\n            icon=\"edit\"\n            disabled={loading}\n          />\n          <Button\n            color=\"teal\"\n            content=\"Upload Media\"\n            labelPosition=\"right\"\n            icon=\"cloud upload\"\n          />\n        </Button.Group>\n      </Segment>\n    );\n  }\n}\nexport default MessagesForm;\n","import React from \"react\";\nimport { Comment } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nconst isOwnMessage = (message, user) => {\n  return user.uid === message.user.uid ? \"message__self\" : \"\";\n};\n\nconst timeFromNow = (timestamp) => moment(timestamp).fromNow();\n\nconst Message = ({ message, user }) => {\n  if (message && user)\n    return (\n      <Comment>\n        <Comment.Avatar src={message.user.avatar} />\n        <Comment.Content className={isOwnMessage(message, user)}>\n          <Comment.Author as=\"a\">{message.user.name}</Comment.Author>\n          <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\n          <Comment.Text>{message.content}</Comment.Text>\n        </Comment.Content>\n      </Comment>\n    );\n  else return <div></div>;\n};\n\nexport default Message;\n","import React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\n\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessagesForm from \"./MessagesForm\";\nimport firebase from \"../../firebase\";\nimport Message from \"./Message\";\n\nclass Messages extends React.Component {\n  state = {\n    messagesRef: firebase.database().ref(\"messages\"),\n    currentChannel: this.props.currentChannel,\n    currentUser: this.props.currentUser,\n    messages: [],\n    messageLoading: true,\n  };\n  componentDidMount() {\n    const { currentChannel, currentUser } = this.state;\n    if (currentChannel && currentUser) {\n      this.addListener(currentChannel.id);\n    }\n  }\n\n  addListener = (channelID) => {\n    this.addMessageListner(channelID);\n  };\n\n  addMessageListner = (channelID) => {\n    let loadedMessages = [];\n    this.state.messagesRef.child(channelID).on(\"child_added\", (snap) => {\n      loadedMessages.push(snap.val());\n      this.setState({ messages: loadedMessages, messageLoading: false });\n    });\n  };\n\n  displayMessages = (messages) => {\n    return (\n      messages.length > 0 &&\n      messages.map((message) => (\n        <Message\n          key={message.timestamp}\n          message={message}\n          user={this.state.currentUser}\n        />\n      ))\n    );\n  };\n\n  render() {\n    const { messagesRef, messages, currentChannel, currentUser } = this.state;\n    return (\n      <React.Fragment>\n        <MessagesHeader currentChannel={currentChannel} />\n        <Segment>\n          <Comment.Group className=\"messages\">\n            {this.displayMessages(messages)}\n          </Comment.Group>\n        </Segment>\n        <MessagesForm\n          messagesRef={messagesRef}\n          currentChannel={currentChannel}\n          currentUser={currentUser}\n        />\n      </React.Fragment>\n    );\n  }\n}\nexport default Messages;\n","import React from \"react\";\n\nclass MetaPanel extends React.Component {\n  render() {\n    return <div> </div>;\n  }\n}\nexport default MetaPanel;\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport ColorPanel from \"./Colorpanel/ColorPanel\";\nimport SidePanel from \"./Sidepanel/SidePanel\";\nimport Messages from \"./Messages/Messages\";\nimport MetaPanel from \"./Metapanel/MetaPanel\";\n\nconst App = (props) => {\n  // console.log(props);\n  return (\n    <Grid columns=\"equal\" className=\"app\" style={{ background: \"#eee\" }}>\n      <ColorPanel />\n      <SidePanel key={props.user && props.user.uid} currentUser={props.user} />\n      <Grid.Column style={{ marginLeft: 320 }}>\n        <Messages\n          key={props.channel && props.channel.id}\n          currentChannel={props.channel}\n          currentUser={props.user}\n        />\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <MetaPanel />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n  Icon,\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport firebase from \"../../firebase\";\n\nclass Login extends React.Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    errors: [],\n    loading: false,\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  isFormValid = ({ email, password }) => {\n    this.setState({\n      errors: [],\n    });\n    if (!email.length) {\n      let error = [{ message: \"Enter Email\" }];\n      this.setState({\n        errors: error,\n      });\n    } else if (!password.length) {\n      let error = [{ message: \"Enter Password\" }];\n      this.setState({\n        errors: error,\n      });\n    } else {\n      return true;\n    }\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.isFormValid(this.state)) {\n      this.setState({ errors: [], loading: true });\n      firebase\n        .auth()\n        .signInWithEmailAndPassword(this.state.email, this.state.password)\n        .then((createdUser) => {\n          // consconsole.log(createdUser);\n          this.setState({ loading: false });\n        })\n        .catch((error) => {\n          // console.error(error);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(error),\n          });\n        });\n    }\n  };\n\n  handleErrors = (errors, inputName) => {\n    return errors.some((error) =>\n      error.message.toLowerCase().includes(inputName)\n    )\n      ? \"error\"\n      : \"\";\n  };\n\n  displayErrors = (errors) =>\n    errors.map((error, i) => <p key={i}>{error.message}</p>);\n\n  render() {\n    return (\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"login\">\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h1\" icon color=\"yellow\" textAlign=\"center\">\n            <Icon name=\"code branch\" color=\"yellow\" />\n            Login for Nerd-Chat\n          </Header>\n          <Form size=\"large\" onSubmit={this.handleSubmit}>\n            <Segment stacked>\n              <Form.Input\n                fluid\n                name=\"email\"\n                icon=\"mail\"\n                iconPosition=\"left\"\n                placeholder=\"Email Adress\"\n                onChange={this.handleChange}\n                type=\"email\"\n                style={{ backgroundColor: \"rgba(0, 0, 0, 0)\" }}\n                className={this.handleErrors(this.state.errors, \"email\")}\n              />\n\n              <Form.Input\n                fluid\n                name=\"password\"\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                onChange={this.handleChange}\n                type=\"password\"\n                className={this.handleErrors(this.state.errors, \"password\")}\n                style={{ backgroundColor: \"rgba(0, 0, 0, 0)\" }}\n              />\n\n              <Button\n                disabled={this.state.loading}\n                color=\"black\"\n                className={this.state.loading ? \"loading\" : \"\"}\n                fluid\n                size=\"large\"\n              >\n                Submit\n              </Button>\n            </Segment>\n          </Form>\n          {this.state.errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(this.state.errors)}\n            </Message>\n          )}\n          <Message\n            style={{ backgroundColor: \"rgba(0, 0, 0, 0)\" }}\n            textAlign=\"left\"\n          >\n            <Link to=\"/register\">New User! </Link>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport {\n  Grid,\n  Form,\n  Segment,\n  Button,\n  Header,\n  Message,\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport md5 from \"md5\";\n\nimport firebase from \"../../firebase\";\n\nclass Register extends React.Component {\n  state = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordconfirmation: \"\",\n    errors: [],\n    loading: false,\n    userRef: firebase.database().ref(\"users\"),\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  isFormEmpty = ({ username, email, password, passwordconfirmation }) => {\n    return (\n      !username.length ||\n      !email.length ||\n      !password.length ||\n      !passwordconfirmation.length\n    );\n  };\n\n  isPasswordValid = ({ password, passwordconfirmation }) => {\n    if (\n      password.length < 6 ||\n      passwordconfirmation.length < 6 ||\n      password !== passwordconfirmation\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  isFormValid = () => {\n    let errors = [],\n      error;\n    if (this.isFormEmpty(this.state)) {\n      // throw error\n\n      error = { message: \"Fill all details\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else if (!this.isPasswordValid(this.state)) {\n      // throw error\n\n      error = { message: \"Password is not valid\" };\n      this.setState({ errors: errors.concat(error) });\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  saveUser = (createdUser) => {\n    this.state.userRef.child(createdUser.user.uid).set({\n      name: createdUser.user.displayName,\n      avatar: createdUser.user.photoURL,\n    });\n    return Promise.resolve(1);\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.isFormValid()) {\n      this.setState({ errors: [], loading: true });\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(this.state.email, this.state.password)\n        .then((createdUser) => {\n          // console.log(createdUser);\n          createdUser.user\n            .updateProfile({\n              displayName: this.state.username,\n              photoURL: `https://gravatar.com/avatar/${md5(\n                createdUser.user.email\n              )}?d=identicon`,\n            })\n            .then(() => {\n              this.saveUser(createdUser)\n                .then(() => {\n                  this.setState({ loading: false });\n                })\n                .catch((error) => {\n                  this.setState({\n                    errors: this.state.errors.concat(error),\n                    loading: false,\n                  });\n                });\n              // this.setState({ loading: false });\n            })\n            .catch((error) => {\n              this.setState({\n                errors: this.state.errors.concat(error),\n                loading: false,\n              });\n            });\n        })\n        .catch((error) => {\n          // console.error(error);\n          this.setState({\n            errors: this.state.errors.concat(error),\n            loading: false,\n          });\n        });\n    }\n  };\n\n  handleErrors = (errors, inputName) => {\n    return errors.some((error) =>\n      error.message.toLowerCase().includes(inputName)\n    )\n      ? \"error\"\n      : \"\";\n  };\n\n  displayErrors = (errors) =>\n    errors.map((error, i) => <p key={i}>{error.message}</p>);\n\n  render() {\n    return (\n      <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"register\">\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h2\" icon color=\"yellow\" textAlign=\"center\">\n            {/*     <Icon name=\"user plus\" color=\"black\" /> */}\n            Register for Nerd-Chat\n          </Header>\n          <Form size=\"large\" onSubmit={this.handleSubmit}>\n            <Segment stacked>\n              <Form.Input\n                fluid\n                name=\"username\"\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder=\"Username\"\n                onChange={this.handleChange}\n                type=\"text\"\n                className={this.handleErrors(this.state.errors, \"username\")}\n              />\n\n              <Form.Input\n                fluid\n                name=\"email\"\n                icon=\"mail\"\n                iconPosition=\"left\"\n                placeholder=\"Email Adress\"\n                onChange={this.handleChange}\n                type=\"email\"\n                className={this.handleErrors(this.state.errors, \"email\")}\n              />\n\n              <Form.Input\n                fluid\n                name=\"password\"\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                onChange={this.handleChange}\n                type=\"password\"\n                className={this.handleErrors(this.state.errors, \"password\")}\n              />\n\n              <Form.Input\n                fluid\n                name=\"passwordconfirmation\"\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Confirm Password\"\n                onChange={this.handleChange}\n                type=\"password\"\n                className={this.handleErrors(this.state.errors, \"password\")}\n              />\n\n              <Button\n                disabled={this.state.loading}\n                color=\"black\"\n                className={this.state.loading ? \"loading\" : \"\"}\n                fluid\n                size=\"large\"\n              >\n                Submit\n              </Button>\n            </Segment>\n          </Form>\n          {this.state.errors.length > 0 && (\n            <Message error>\n              <h3>Error</h3>\n              {this.displayErrors(this.state.errors)}\n            </Message>\n          )}\n          <Message\n            color=\"white\"\n            style={{ backgroundColor: \"rgba(0, 0, 0, 0)\" }}\n          >\n            <Link to=\"/login\"> Already a User!</Link>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Register;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const intitialUserState = {\n  currentUser: null,\n  isLoading: true,\n};\n\nconst user_reducer = (state = intitialUserState, action) => {\n  switch (action.type) {\n    case \"SET_USER\":\n      return {\n        currentUser: action.payload.currentUser,\n        isLoading: false,\n      };\n    case \"CLEAR_USER\":\n      return {\n        ...state,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default user_reducer;\n","import { CHANGE_CHANNEL } from \"../actions/types\";\nconst intitialChannelState = {\n  currentChannel: null,\n};\n\nconst channel_reducer = (state = intitialChannelState, action) => {\n  switch (action.type) {\n    case CHANGE_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload.currentChannel,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default channel_reducer;\n","import { combineReducers } from \"redux\";\n\nimport user_reducer from \"./userReducer\";\nimport channel_reducer from \"./channelReducer\";\n\nconst rootReducer = combineReducers({\n  user: user_reducer,\n  channel: channel_reducer,\n});\n\nexport default rootReducer;\n","import * as actionTypes from \"../actions/types\";\n\nconst setUser = (user) => {\n  return {\n    type: actionTypes.SET_USER,\n    payload: {\n      currentUser: user,\n    },\n  };\n};\n\nexport default setUser;\n","import * as actionTypes from \"./types\";\n\nconst clearUser = () => {\n  return {\n    type: actionTypes.CLEAR_USER,\n  };\n};\n\nexport default clearUser;\n","import { Loader, Dimmer } from \"semantic-ui-react\";\nimport React from \"react\";\n\nconst Spinner = () => (\n  <Dimmer>\n    <Loader size=\"huge\" content=\"Preparing Chat\" />\n  </Dimmer>\n);\nexport default Spinner;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter,\n} from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport App from \"./components/App\";\nimport Login from \"./components/Auth/Login\";\nimport Register from \"./components/Auth/Register\";\nimport firebase from \"./firebase\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./reducers/index\";\nimport setUser from \"./actions/setuser\";\nimport clearUser from \"./actions/clearuser\";\nimport Spinner from \"./components/spinner\";\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nconst mapStateFromProps = (state) => {\n  return {\n    isLoading: state.user.isLoading,\n    user: state.user.currentUser,\n  };\n};\n\nconst mapDispatchToProps = () => {\n  return { setUser, clearUser };\n};\n\nclass Root extends React.Component {\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.props.setUser(user);\n        this.props.history.push(\"/\");\n      } else {\n        this.props.history.push(\"/login\");\n        this.props.clearUser();\n      }\n    });\n  }\n  render() {\n    return this.props.isLoading ? (\n      <Spinner />\n    ) : (\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/register\" component={Register} />\n      </Switch>\n    );\n  }\n}\n\nconst RootWithAuth = withRouter(\n  connect(mapStateFromProps, mapDispatchToProps())(Root)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <RootWithAuth />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}